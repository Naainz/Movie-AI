<!-- I used ChatGPT to debug the code and fix the issues. I also used ChatGPT to explain specific parts of the Astro documentation, since I was unfamiliar with the terminology. -->
---
import Layout from '../layouts/Layout.astro';

const genres = [
  "Action", "Comedy", "Drama", "Horror", "Sci-Fi", "Thriller", "Adventure",
  "Animation", "Biography", "Crime", "Documentary", "Family", "Fantasy", 
  "History", "Musical", "Mystery", "Romance", "Sport", "War", "Western"
];
---

<Layout>
  <div class="p-4">
    <h1 class="text-3xl font-bold mb-4">Movie Recommendation Demo</h1>
    <div id="content">
      <p class="mb-6">Select the genres you're interested in and click "Send to Analyser" to get movie recommendations.</p>
      <div id="genreForm" class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 mb-6">
        {genres.map(genre => (
          <button type="button" id={genre} class="genre-toggle bg-gray-200 text-gray-900 py-2 px-4 rounded border border-gray-300 hover:bg-gray-300 transition-colors duration-300">
            {genre}
          </button>
        ))}
      </div>
      <button type="button" class="bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600 focus:outline-none" id="analyser-button">Send to Analyser</button>
    </div>
    <div id="loading" class="hidden text-center mt-8">
      <i class="fas fa-spinner fa-spin text-4xl text-blue-500"></i>
      <p class="mt-4 text-xl" id="loading-text"></p>
    </div>
    <div id="results" class="hidden mt-8">
      <h2 class="text-2xl font-bold mb-4">Recommendations</h2>
      <div id="recommendations" class="grid grid-cols-1 gap-4">
        <!-- Recommendations will be injected here -->
      </div>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const genreButtons = document.querySelectorAll('.genre-toggle');
      genreButtons.forEach(button => {
        button.addEventListener('click', function() {
          button.classList.toggle('bg-orange-500');
          button.classList.toggle('text-white');
          button.classList.toggle('border-orange-500');
          button.classList.toggle('bg-gray-200');
          button.classList.toggle('text-gray-900');
          button.classList.toggle('border-gray-300');
        });
      });

      document.getElementById('analyser-button').addEventListener('click', sendToAnalyser);

      // Dark mode toggle
      const toggleSwitch = document.querySelector('.theme-switch input[type="checkbox"]');
      const currentTheme = localStorage.getItem('theme') ? localStorage.getItem('theme') : null;

      if (currentTheme) {
        document.documentElement.setAttribute('data-theme', currentTheme);

        if (currentTheme === 'dark') {
          toggleSwitch.checked = true;
        }
      }

      function switchTheme(e) {
        if (e.target.checked) {
          document.documentElement.setAttribute('data-theme', 'dark');
          localStorage.setItem('theme', 'dark');
        } else {
          document.documentElement.setAttribute('data-theme', 'light');
          localStorage.setItem('theme', 'light');
        }   
      }

      toggleSwitch.addEventListener('change', switchTheme, false);
    });

    async function sendToAnalyser() {
      const selectedGenres = Array.from(document.querySelectorAll('.genre-toggle.bg-orange-500')).map(el => el.id);
      document.getElementById('content').classList.add('fade-out');
      setTimeout(() => {
        document.getElementById('content').classList.add('hidden');
        document.getElementById('loading-text').innerText = `Get ready! You selected: ${selectedGenres.join(', ')}`;
        const loading = document.getElementById('loading');
        loading.classList.remove('hidden');
        loading.classList.add('fade-in');
        fetchRecommendations(selectedGenres);
      }, 500);
    }

    async function fetchRecommendations(categories) {
      try {
        const response = await fetch('/api/recommend.json', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ categories: categories.join(', ') }),
        });
        const data = await response.json();
        console.log('Response Data:', data); // Debugging

        if (!data.recommendations || data.recommendations.length === 0) {
          alert('No recommendations found.');
          document.getElementById('loading').classList.add('hidden');
          return;
        }

        const cleanedRecommendations = data.recommendations.map(rec => rec.replace(/"/g, '')).slice(0, 3);
        console.log('Cleaned Recommendations:', cleanedRecommendations); // Debugging

        const recommendationsContainer = document.getElementById('recommendations');
        recommendationsContainer.innerHTML = ''; // Clear previous recommendations

        cleanedRecommendations.forEach(async (rec) => {
          console.log('Processing Recommendation:', rec); // Debugging
          
          // Extract the title and description
          const titleMatch = rec.match(/^(.*?\))/); // Matches everything up to and including the first closing parenthesis
          const title = titleMatch ? titleMatch[0].trim() : rec.trim();
          const description = rec.replace(title, '').replace('-', '').trim(); // Remove the title from rec to get the description

          console.log('Extracted Title:', title); // Debugging
          console.log('Extracted Description:', description); // Debugging

          // Create the recommendation element with placeholder image
          const recommendationElement = document.createElement('div');
          recommendationElement.classList.add('recommendation', 'flex', 'items-start', 'p-4', 'bg-gray-200', 'dark:bg-gray-700', 'rounded-lg', 'shadow-md');
          recommendationElement.innerHTML = `
            <img src="https://via.placeholder.com/150" alt="${title}" class="w-1/4 h-auto rounded-lg shadow-md">
            <div class="ml-4">
              <h3 class="text-xl font-bold">${title}</h3>
              <p class="mt-2 text-gray-600 dark:text-gray-400">${description}</p>
            </div>
          `;
          recommendationsContainer.appendChild(recommendationElement);

          // Extract the part before the first parenthesis for fetching the poster
          const movieTitle = title.split('(')[0].trim(); 
          fetchMoviePoster(movieTitle).then(poster => {
            recommendationElement.querySelector('img').src = poster;
          });
        });

        document.getElementById('loading').classList.add('hidden');
        document.getElementById('results').classList.remove('hidden');
        document.getElementById('results').classList.add('fade-in');
      } catch (error) {
        console.error('Error fetching recommendations:', error);
        alert('An error occurred while fetching recommendations.');
        document.getElementById('loading').classList.add('hidden');
      }
    }

    async function fetchMoviePoster(title) {
      try {
        const response = await fetch('/api/poster.json', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ title }),
        });
        const data = await response.json();
        console.log('Poster API Response:', data); // Debugging
        return data.poster;
      } catch (error) {
        console.error('Error fetching movie poster:', error);
        return 'https://via.placeholder.com/150';
      }
    }
  </script>

  <style>
    .hidden {
      display: none;
    }
    .fade-out {
      opacity: 0;
      transition: opacity 0.5s ease;
    }
    .fade-in {
      opacity: 1;
      transition: opacity 0.5s ease;
    }
    .recommendation img {
      height: 90%;
    }
    .text-gray-600 {
      color: #718096;
    }
    .dark .text-gray-600 {
      color: #A0AEC0;
    }
    .theme-switch-wrapper {
      display: flex;
      align-items: center;
      justify-content: center;
      margin-bottom: 16px;
    }
    .theme-switch {
      display: inline-block;
      height: 34px;
      position: relative;
      width: 60px;
    }
    .theme-switch input {
      display: none;
    }
    .slider {
      background-color: #ccc;
      bottom: 0;
      cursor: pointer;
      left: 0;
      position: absolute;
      right: 0;
      top: 0;
      transition: .4s;
    }
    .slider:before {
      background-color: #fff;
      bottom: 4px;
      content: "";
      height: 26px;
      left: 4px;
      position: absolute;
      transition: .4s;
      width: 26px;
    }
    input:checked + .slider {
      background-color: #2196F3;
    }
    input:checked + .slider:before {
      transform: translateX(26px);
    }
    .slider.round {
      border-radius: 34px;
    }
    .slider.round:before {
      border-radius: 50%;
    }
  </style>
</Layout>
